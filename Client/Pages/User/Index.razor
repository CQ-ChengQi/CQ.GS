@page "/user"
@attribute [ReuseTabsPageTitle("用户列表")]

@using CQ.GS.Client.Components;
@using CQ.GS.Client.Services;
@using CQ.GS.Shared;

@inject UserService UserService;
@inject NavigationManager NavMgr;
@inject IDialogService DialogService;






<MudCard Elevation="0">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">查询</MudText>
        </CardHeaderContent>
        <CardHeaderActions>
            <MudIconButton Icon="@Icons.Material.Filled.Search" Color="Color.Default" />
        </CardHeaderActions>
    </MudCardHeader>

    <MudCardContent>
        <MudGrid>
            <MudItem xs="4">
                <MudTextField Label="姓名" Variant="Variant.Text" @bind-Value="searchModel.Name" />
            </MudItem>
            <MudItem xs="4">
                <MudTextField Label="性别" Variant="Variant.Text" @bind-Value="searchModel.Name" />
            </MudItem>
            <MudItem xs="4">
                <MudTextField Label="年龄" Variant="Variant.Text" @bind-Value="searchModel.Name" />
            </MudItem>
        </MudGrid>
    </MudCardContent>

    <MudCardActions Class="d-flex justify-end">
        <MudButton Variant="Variant.Text" Color="Color.Primary">重置</MudButton>
        <MudButton Variant="Variant.Text" Color="Color.Primary">查询</MudButton>
    </MudCardActions>
</MudCard>

<MudCard Class="mt-6 mb-6" Elevation="0">
    <MudTable @ref="table" Items="users" Hover="true" SortLabel="Sort By" RowsPerPage="10" Virtualize="true" FixedHeader="true" FixedFooter="true" Height="700px" Elevation="0">
        <ToolBarContent>
            <MudText Typo="Typo.h6">查询列表</MudText>
            <MudSpacer />
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Info">新增</MudButton>
        </ToolBarContent>

        <HeaderContent>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<User, object>(x => x.Name)">名称</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<User, object>(x => x.Gender)">性别</MudTableSortLabel>
            </MudTh>
            <MudTh Style="width:200px; font-weight:700; text-align:center;">
                操作
            </MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Gender">@context.Gender</MudTd>
            <MudTd Style="text-align:center;">
                <MudButton Variant="Variant.Text" Size="Size.Small" Color="Color.Info" OnClick="(e) => Edit(context)">编辑</MudButton>
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudGrid Class="pa-4">
                <MudItem xl="4" Class="d-flex align-center">
                    <MudStack Row AlignItems="AlignItems.Center">
                         <MudSelect T="string" Label="@($"总条目 {table.GetFilteredItemsCount()} / 页尺寸")" Margin="Margin.Dense" AnchorOrigin="Origin.BottomCenter" Variant="Variant.Outlined">
                             <MudSelectItem Value="@("10")" />
                             <MudSelectItem Value="@("20")" />
                             <MudSelectItem Value="@("50")" />
                         </MudSelect>
                     </MudStack>
                 </MudItem>
                 <MudItem xl="8" Class="d-flex align-center">
                     <MudPagination Class="ml-auto" SelectedChanged="PageSelected" Count="@((table.GetFilteredItemsCount() + table.RowsPerPage - 1) / table.RowsPerPage)" />
                 </MudItem>
             </MudGrid>
         </PagerContent>
     </MudTable>
 </MudCard>



 @code {
    private MudTable<User> table;
    private IEnumerable<User> users = new List<User>();
    private int _selected;




    private const string Nan = "男";
    private const string Nv = "女";

    public class UserSearchModel
    {
        public string Name { get; set; } = string.Empty;
        public string Gender { get; set; } = string.Empty;
    }

    private UserSearchModel searchModel = new UserSearchModel();

    protected override async Task OnInitializedAsync()
    {
        await InitUsers();
    }


    private void PageSelected(int newPage)
    {

        table.NavigateTo(newPage - 1);
    }

    /// <summary>
    /// 获取用户列表 。
    /// </summary>
    /// <returns></returns>
    private async Task InitUsers()
    {
        var result = await UserService.GetUsers(new UserSearchModel());
        if (result != null)
        {
            users = result;
        }
    }

    private void Edit(User item)
    {
        NavMgr.NavigateTo(string.Format("/user/edit/{0}", item.Name));
    }

    private void OpenDialog(User item)
    {
        var parameters = new DialogParameters();
        parameters.Add("User", item);

        DialogService.Show<EditDialog>($"编辑 - {item.Name}", parameters);
    }

}