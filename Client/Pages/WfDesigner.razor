@page "/wf-designer"
@layout EmptyLayout

@using Blazor.Diagrams.Components
@using Blazor.Diagrams.Components.Widgets
@using Blazor.Diagrams.Core.Anchors;
@using Blazor.Diagrams.Core.Geometry;
@using Blazor.Diagrams.Core.Models;
@using Blazor.Diagrams.Options;
@using CQ.GS.Client.Components.WorkflowDesigner;
@using CQ.GS.Client.Models.Diagrams;
@using CQ.GS.Client.Services;

<MudGrid Spacing="0">
    <MudItem md="12" xs="12">
        <MudPaper Elevation="25">
            <MudToolBar>
                <MudIconButton Icon="@Icons.Material.Outlined.Menu" Color="Color.Inherit" Class="mr-5" />
                <MudIconButton Icon="@Icons.Material.Outlined.Add" />
                <MudIconButton Icon="@Icons.Material.Outlined.Edit" />
                <MudIconButton Icon="@Icons.Material.Outlined.Remove" Color="Color.Inherit" />
                <MudIconButton Icon="@Icons.Material.Outlined.Settings" Color="Color.Inherit" />
                <MudSpacer />
                <MudIconButton Icon="@Icons.Material.Outlined.Notifications" />
                <MudIconButton Icon="@Icons.Material.Outlined.PushPin" />
                <MudIconButton Icon="@Icons.Material.Outlined.PeopleAlt" />
                <MudIconButton Icon="@Icons.Material.Outlined.MoreVert" Color="Color.Inherit" />
            </MudToolBar>
        </MudPaper>
    </MudItem>
    <MudItem md="3" xs="12">
        <MudDropContainer T="DropItem" Items="_items" ItemsSelector="@((item,dropzone) => item.Identifier == dropzone)"
                          ItemDropped="ItemUpdated" Class="d-flex flex-wrap flex-grow-1">
            <ChildContent>
                <MudDropZone T="DropItem" Identifier="Drop Zone 1"
                             Class="rounded mud-background-gray pa-6 ma-8 flex-grow-1">
                    <MudText Typo="Typo.h6" Class="mb-4">Drop Zone 1</MudText>
                </MudDropZone>
                <MudDropZone T="DropItem" Identifier="Drop Zone 2"
                             Class="rounded mud-background-gray pa-6 ma-8 flex-grow-1">
                    <MudText Typo="Typo.h6" Class="mb-4">Drop Zone 2</MudText>
                </MudDropZone>
            </ChildContent>
            <ItemRenderer>
                <MudPaper Elevation="25" Class="pa-4 my-4">@context.Name</MudPaper>
            </ItemRenderer>
        </MudDropContainer>
    </MudItem>
    <MudItem md="6" xs="12">
        <MudPaper Height="calc(100vh - 96px)" Square="true" Class="ma-4" Elevation="4">
            <CascadingValue Value="diagram">
                <DiagramCanvas></DiagramCanvas>
            </CascadingValue>
        </MudPaper>
    </MudItem>
    <MudItem md="3" xs="12">

    </MudItem>
</MudGrid>






@code {

    [Inject]
    private AppSettings? _appSettings { get; set; }

    private BlazorDiagram? diagram;

    private void ItemUpdated(MudItemDropInfo<DropItem> dropItem)
    {
        if (dropItem != null && dropItem.Item != null)
        {
            dropItem.Item.Identifier = dropItem.DropzoneIdentifier;
        }

    }

    private List<DropItem> _items = new()
    {
        new DropItem(){ Name = "Drag me!", Identifier = "Drop Zone 1" },
        new DropItem(){ Name = "Or me!", Identifier = "Drop Zone 2" },
        new DropItem(){ Name = "Just Mud", Identifier = "Drop Zone 1" },
    };

    public class DropItem
    {
        public string Name { get; init; } = string.Empty;
        public string Identifier { get; set; } = string.Empty;
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        var options = new BlazorDiagramOptions();
        options.AllowMultiSelection = true;
        options.Zoom.Enabled = false;

        diagram = new BlazorDiagram(options);

        diagram.RegisterComponent<TwoNumbersNode, TwoNumbersWidget>();
        diagram.RegisterComponent<ListNode, ListWidget>();

        var node1 = new NodeModel(position: new Point(50, 50));
        node1.Title = "Node 1";

        var node2 = new NodeModel(position: new Point(500, 200));
        node2.Title = "Node 2";

        var leftPort = node2.AddPort(PortAlignment.Left);
        var rightPort = node2.AddPort(PortAlignment.Right);

        var sourceAnchor = new ShapeIntersectionAnchor(node1);
        var targetAnchor = new SinglePortAnchor(leftPort);
        var link = diagram.Links.Add(new LinkModel(sourceAnchor, targetAnchor));

        diagram.Nodes.Add(node1);
        diagram.Nodes.Add(node2);

        var node = new TwoNumbersNode(new Point(80, 80));
        node.AddPort(PortAlignment.Right);

        diagram.Nodes.Add(node);

        var node3 = new ListNode(new Point(200, 200));
        diagram.Nodes.Add(node3);

    }
}