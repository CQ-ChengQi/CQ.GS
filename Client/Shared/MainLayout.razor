@using CQ.GS.Client.Components.Layout
@using CQ.GS.Client.Components.Reuse
@using CQ.GS.Client.Services;
@using CQ.GS.Shared.Utils.Attributes;

@inherits LayoutComponentBase

@inject NavigationManager NavigationManager
@inject AppSettings Settings;

<MudThemeProvider />
<MudSnackbarProvider />
<MudDialogProvider FullWidth="true"
                   MaxWidth="MaxWidth.ExtraSmall"
                   CloseButton="true"
                   DisableBackdropClick="true"
                   NoHeader="false"
                   Position="DialogPosition.Center"
                   CloseOnEscapeKey="true" />
<MudSnackbarProvider />

<MudOverlay @bind-Visible="Settings.Loading" LightBackground="true" AutoClose="true" ZIndex="9999">
    <MudProgressCircular Color="Color.Primary" Style="height:70px;width:70px;" Indeterminate="true" />
</MudOverlay>
<MudLayout>
    <MudAppBar Elevation="0">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudText Typo="Typo.h5" Class="ml-3">Application</MudText>
        <MudSpacer />
        <MudIconButton Icon="@Icons.Material.Filled.MoreVert" Color="Color.Inherit" Edge="Edge.End" />
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">


        <MudNavMenu>
            <MudNavGroup Title="系统设置" Icon="@Icons.Material.Filled.Router">
                <MudNavLink Href="/user" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Group">用户管理</MudNavLink>
                <MudNavLink Href="/role" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Group">角色管理</MudNavLink>
                <MudNavLink Href="/wf-designer" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Group">流程设置</MudNavLink>
                <MudNavLink Href="/form-designer" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Group">表单设计</MudNavLink>
            </MudNavGroup>
        </MudNavMenu>
    </MudDrawer>
    <MudMainContent>
        @*      <ReuseTabs></ReuseTabs> *@

        <MudCard Square="true" Elevation="0">
            <MudBreadcrumbs Items="_items"></MudBreadcrumbs>
            <MudContainer MaxWidth="MaxWidth.False" Class="pb-4">
                <MudStack>
                    <MudText Typo="Typo.h5">@_pageTitle</MudText>
                    <MudText Typo="Typo.body1">@_pageDesc</MudText>
                </MudStack>

            </MudContainer>
        </MudCard>
        <MudContainer MaxWidth="MaxWidth.False" Class="pt-6 pb-2">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>



@code {
    private bool _drawerOpen = true;
    private string _navMenuWidth = "";
    private string _appBarHeight = "";
    private string _pageTitle = "";
    private string _pageDesc = "";

    [CascadingParameter]
    private RouteData? RouteData { get; set; }


    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("首页", href: "#", icon:Icons.Material.Filled.Home),
        new BreadcrumbItem("用户管理", href: null, disabled: true)
    };

    protected override void OnInitialized()
    {
        base.OnInitialized();

        if (Settings != null)
        {
            _navMenuWidth = Settings.NavMenuWidth;
            _appBarHeight = Settings.AppBarHeight;

            Settings.LoadingAction = () =>
            {
                InvokeAsync(StateHasChanged);
            };
        }
    }

    public override Task SetParametersAsync(ParameterView parameters)
    {

        _pageTitle = string.Empty;
        _pageDesc = string.Empty;

        if (parameters.TryGetValue(nameof(RouteData), out RouteData? routeData))
        {
            if (routeData != null)
            {
                var attributes = routeData.PageType.GetCustomAttributes(true);
                if (attributes.FirstOrDefault(x => x is PageInfoAttribute) is PageInfoAttribute attr && attr != null)
                {
                    _pageTitle = attr.Title;
                    _pageDesc = attr.Desc;
                }
            }
        }

        return base.SetParametersAsync(parameters);
    }


    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }
}