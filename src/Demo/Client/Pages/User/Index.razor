@page "/user"

@using CQ.GS.Client.Services;
@using CQ.GS.Shared.Dtos.Filter;
@using CQ.GS.Shared.Dtos.Output;
@using CQ.GS.Shared.EnumModel;
@using CQ.GS.Shared.Models;
@using CQ.GS.Shared.Utils.Attributes;
@using Newtonsoft.Json;

@attribute [PageInfo("用户列表", "用户列表用户列表用户列表")]

@inject UserService UserService;
@inject NavigationManager NavMgr;
@inject IDialogService DialogService;


<MudCard Elevation="0">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">查询</MudText>
        </CardHeaderContent>
        <CardHeaderActions>
            <MudIconButton Icon="@Icons.Material.Filled.Search" Color="Color.Default" />
        </CardHeaderActions>
    </MudCardHeader>

    <MudCardContent>
        <MudGrid>
            <MudItem xs="4">
                <MudTextField Label="姓名" Variant="Variant.Text" @bind-Value="_userInfoFilter.UserName" />
            </MudItem>
            <MudItem xs="4">
                <MudSelect Label="性别" AnchorOrigin="Origin.BottomCenter" @bind-Value="_userInfoFilter.Gender">
                    <MudSelectItem Value="Gender.None">请选择</MudSelectItem>
                    <MudSelectItem Value="Gender.Girl">@Gender.Girl.GetDisplayName()</MudSelectItem>
                    <MudSelectItem Value="Gender.Man">@Gender.Man.GetDisplayName()</MudSelectItem>
                    <MudSelectItem Value="Gender.Other">@Gender.Other.GetDisplayName()</MudSelectItem>
                </MudSelect>
            </MudItem>
            <MudItem xs="4">
                <MudStack Row>
                    <MudNumericField Label="年龄-开始" Variant="Variant.Text" @bind-Value="_userInfoFilter.StartAge" />
                    <MudNumericField Label="年龄-结束" Variant="Variant.Text" @bind-Value="_userInfoFilter.EndAge" />
                </MudStack>

            </MudItem>
        </MudGrid>
    </MudCardContent>

    <MudCardActions Class="d-flex justify-end">
        <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="ResetSearch">重置</MudButton>
        <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="InitUsers">查询</MudButton>
    </MudCardActions>
</MudCard>

<MudCard Class="mt-6 mb-6" Elevation="0">
    <MudTable @ref="_table" Items="_users" Hover="true" SortLabel="Sort By" RowsPerPage="_pageSize" Virtualize="true" FixedHeader="true" FixedFooter="true" Elevation="0">
        <ToolBarContent>
            <MudText Typo="Typo.h6">查询列表</MudText>
            <MudSpacer />
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Info">新增</MudButton>
        </ToolBarContent>

        <HeaderContent>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<UserInfoOutput, object>(x => x.UserName)">用户名</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<UserInfoOutput, object>(x => x.Name)">名称</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<UserInfoOutput, object>(x => x.Gender)">性别</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<UserInfoOutput, object>(x => x.Email)">邮箱</MudTableSortLabel>
            </MudTh>
            <MudTh Style="width:400px; font-weight:700; text-align:center;">
                操作
            </MudTh>
        </HeaderContent>

        <RowTemplate>
            <MudTd DataLabel="Name">@context.UserName</MudTd>
            <MudTd DataLabel="Gender">@context.Name</MudTd>
            <MudTd DataLabel="Name">@context.Gender</MudTd>
            <MudTd DataLabel="Gender">@context.Email</MudTd>
            <MudTd Style="text-align:center;">
                <MudButton Variant="Variant.Text" Size="Size.Small" Color="Color.Info" OnClick="(e) => Edit(context)">编辑</MudButton>
                <MudButton Variant="Variant.Text" Size="Size.Small" Color="Color.Info" OnClick="(e) => OpenDialog(context)">编辑（Dialog）</MudButton>
            </MudTd>
        </RowTemplate>

        <PagerContent>
            <MudGrid Class="pa-4">
                <MudItem xl="4" Class="d-flex align-center">
                    <MudStack Row AlignItems="AlignItems.Center">
                         <MudSelect @bind-Value="_pageSize" T="int" Label="@($"总条目 {_total} / 页尺寸")" Margin="Margin.Dense" AnchorOrigin="Origin.BottomCenter" Variant="Variant.Outlined" SelectedValuesChanged="PageSizeSelected">
                             <MudSelectItem Value="@(10)" />
                             <MudSelectItem Value="@(20)" />
                             <MudSelectItem Value="@(50)" />
                         </MudSelect>
                     </MudStack>
                 </MudItem>
                 <MudItem xl="8" Class="d-flex align-center">
                     <MudPagination Class="ml-auto" Selected="_pageIndex" SelectedChanged="GoPage" Count="@((_total + _pageSize - 1) / _pageSize)" />
                 </MudItem>
             </MudGrid>
         </PagerContent>
     </MudTable>
 </MudCard>



 @code {
    private MudTable<UserInfoOutput>? _table;
    private int _total;
    private int _pageIndex = 2;
    private int _pageSize = 10;

    private IList<UserInfoOutput> _users;
    private UserInfoFilter _userInfoFilter;


    public Index()
    {
        _userInfoFilter = new UserInfoFilter();
        _users = new List<UserInfoOutput>();
    }

    protected override async Task OnInitializedAsync()
    {
        await InitUsers();
    }

    private void ResetSearch()
    {
        _userInfoFilter = new UserInfoFilter();
    }

    private async Task PageSizeSelected(IEnumerable<int> value)
    {
        if (_table == null)
            return;

        _pageSize = value.First();
        _pageIndex = 1;
        _userInfoFilter.PageSize = _pageSize;

        await InitUsers();
    }


    private async Task GoPage(int value)
    {
        _pageIndex = value;
        _userInfoFilter.PageIndex = value;

        await InitUsers();
    }


    /// <summary>
    /// 页码跳转 。
    /// </summary>
    /// <param name="newPage">选中页码</param>
    private async Task PageSelected(int newPage)
    {
        // _table?.NavigateTo(newPage - 1);
        _userInfoFilter.PageIndex = newPage;
        _userInfoFilter.PageSize = _pageSize;

        await InitUsers();
    }

    /// <summary>
    /// 获取用户列表 。
    /// </summary>
    /// <returns></returns>
    private async Task InitUsers()
    {
        var result = await UserService.GetUsers(_userInfoFilter);
        if (result != null && result.Data != null)
        {
            _users = result.Data;
            _total = result.Total;

            Console.WriteLine("Total {0}", _total);
        }
    }

    private void Edit(UserInfoOutput item)
    {
        NavMgr.NavigateTo(string.Format("/user/edit/{0}", item.Id));
    }

    private async Task OpenDialog(UserInfoOutput item)
    {
        var parameters = new DialogParameters();
        parameters.Add("User", item);

        var result = await DialogService.Show<EditDialog>($"编辑 - {item.Name}", parameters).Result;

        if (!result.Cancelled)
        {
            await InitUsers();
            StateHasChanged();
        }
    }

}